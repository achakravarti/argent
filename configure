#!/bin/sh


ok() {
	printf "[\033[0;32mOK\033[0m]   $1\n"
}


warn() {
	printf "[\033[0;33mWARN\033[0m] $1\n"
}


fail() {
	printf "[\033[0;31mFAIL\033[0m] $1\n"
	exit
}


exists_bin() {
	if [ $SHELL = "/bin/csh" ] ; then
		if which $1 1>/dev/null 2>/dev/null ; then
			return 0
		else
			return 1
		fi
	else
		if which $1 >&/dev/null ; then
			return 0
		else
			return 1
		fi
	fi
}


copyright() {
	echo "Argent Library Copyright (C) 2021 Abhishek Chakravarti"
	echo "This program comes with ABSOLUTELY NO WARRANTY; for details see LICENSE."
	echo "This is free software, and you are welcome to redistribute it"
	echo "under certain conditions; see LICENSE for details."
	echo ""
}


check_os() {
	OS=`uname`
	if [ $OS = "Linux" ] ; then
		ok "GNU/Linux detected..."
	elif [ $OS = "FreeBSD" ] ; then
		ok "FreeBSD detected..."
	else
		fail "Unsupported OS; use FreeBSD or a Linux distro."
	fi
}


check_dep() {
	exists_bin make
	[ $? -ne 0 ] || MAKE=make
	[ -z $MAKE ] && fail "make not found; install it first" \
	    || ok "make found"

	exists_bin gcc
	[ $? -ne 0 ] || GCC=gcc
	[ -z $GCC ] || ok "gcc found"
	
	exists_bin clang
	[ $? -ne 0 ] || CLANG=clang
	[ -z $CLANG ] || ok "clang found"

	if [ -z $GCC ] && [ -z $CLANG ] ; then
		fail "compiler not found; install either gcc or clang"
	fi
	
	exists_bin ccache
	[ $? -ne 0 ] || CCACHE=ccache
	[ -z $CCACHE ] && warn "ccache not found; compilation caching skipped" \
	    || ok "ccache found"
	
	exists_bin valgrind
	[ $? -ne 0 ] || VALGRIND=valgrind
	[ -z $VALGRIND ] && warn "valgrind not found; memory check skipped" \
	    || ok "valgrind found"
	
	exists_bin gcovr
	[ $? -ne 0 ] || GCOVR=gcovr
	[ -z $GCOVR ] && warn "gcovr not found; test coverage skipped" \
	    || ok "gcovr found"
	
	exists_bin psql
	[ $? -ne 0 ] && PSQL= || PSQL=psql
	
	exists_bin pg_config
	[ $? -ne 0 ] && PGCONFIG= || PGCONFIG=pg_config
	[ -z $PGCONFIG ] && fail "libpq not found; install it first" \
	    || ok "libpq found"
}


set_compiler() {
	if [ ! -z $GCC ] && [ ! -z $CLANG ] ; then
		echo
		echo "Both gcc and clang available; which do I use?"
		echo "  1) Default (gcc on Linux / clang on FreeBSD)"
		echo "  2) gcc"
		echo "  3) clang"
		printf "Select an option [default = 1]: "
		read CC 

		if [ -z $CC ] || [ $CC = "1" ] ; then
			[ $OS = "Linux" ] && CC=gcc || CC=clang
			ok "default compiler selected, setting CC to $CC"
		elif [ $CC = "2" ] ; then
			CC=gcc
			ok "gcc selected as compiler"
		elif [ $CC = "3" ] ; then
			CC=clang
			ok "clang selected as compiler"
		else
			fail "invalid option selected"
		fi
	elif [ -z $GCC ] ; then
		CC=clang
		ok "clang selected as compiler"
	else
		CC=gcc
		ok "gcc selected as compiler"
	fi
}


mkwrite() {
	printf "$1" >> $MAKEFILE
}


mktouch() {
	MAKEFILE=makefile

	if [ $SHELL = "/bin/csh" ] ; then
		rm -f $MAKEFILE 1>/dev/null 2>/dev/null
	else
		rm -f $MAKEFILE >&/dev/null
	fi

	touch $MAKEFILE
	ok "touched $MAKEFILE"
}


mkheader() {
	mkwrite "###################################################"
	mkwrite "#############################\n"
 
	mkwrite "# SPDX-License-Identifier: GPL-3.0-only\n"
	mkwrite "#\n"
 
	mkwrite "# Argent---infrastructure for building web services\n"
 	mkwrite "# Copyright (C) 2020 Abhishek Chakravarti\n"
 	mkwrite "#\n"
 
	mkwrite "# This program is free software: you can "
	mkwrite "redistribute it and/or modify it under\n"
 	mkwrite "# the terms of the GNU General Public License as "
	mkwrite "published by the Free Software\n"
 	mkwrite "# Foundation, either version 3 of the License, or"
	mkwrite "(at your option) any later\n"
 	mkwrite "# version.\n"
 	mkwrite "#\n"
 
	mkwrite "# This program is distributed in the hope that it will be "
	mkwrite "useful, but WITHOUT\n"
 	mkwrite "# ANY WARRANTY; without even the implied warranty of "
	mkwrite "MERCHANTIBILITY or FITNESS\n"
 	mkwrite "# FOR A PARTICULAR PURPOSE. See the GNU General Public "
	mkwrite "License for more\n"
 	mkwrite "# details.\n"
 	mkwrite "#\n"
 
	mkwrite "# You should have received a copy of the GNU General Public "
	mkwrite "License along with\n"
 	mkwrite "# this program. If not, see <https://www.gnu.org/licenses/>.\n"
 	mkwrite "#\n"
 
	mkwrite "# You can contact Abhishek Chakravarti at "
	mkwrite "<abhishek@taranjali.org>.\n"
	
	mkwrite "###################################################"
	mkwrite "#############################\n\n\n"
	
	ok "header written"
}


mkvar() {
	mkwrite "# build variables\n\n"
	[ -z $CCACHE ] && mkwrite "CC = $CC\n" || mkwrite "CC = ccache $CC\n"
	mkwrite "CFLAGS = -fPIC -g --coverage -O0 -Wall -Wextra \\ \n"
	mkwrite "\t-I \$(shell pg_config --includedir)\n"
	mkwrite "LDFLAGS = -rdynamic -L \$(shell pg_config --libdir)"
	mkwrite " -lfcgi -lpq -luuid -ldl\n\n\n"

	mkwrite "# library variables\n\n"
	mkwrite "LDIR = src\n"
	mkwrite "LSRC = \$(sort \$(shell find \$(DIR_LIB)/ -type f -name "
	mkwrite "'*.c'))\n"
	mkwrite "LOBJ = \$(patsubst %%.c, %%.o, \$(SRC_LIB))\n"
	mkwrite "LBIN = libargent.so\n\n\n"

	mkwrite "# test variables\n\n"
	mkwrite "TDIR = test\n"
	mkwrite "TSRC = \$(sort \$(wildcard \$(TDIR)/*.c))\n"
	mkwrite "TBIN = \$ag-tests\n\n\n"
}


copyright
echo "Starting Argent build configuration..."

check_os
check_dep
set_compiler

mktouch
mkheader
mkvar


