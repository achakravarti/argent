#!/bin/sh


ok() {
	printf "[\033[0;32mOK\033[0m]   $1\n"
}


warn() {
	printf "[\033[0;33mWARN\033[0m] $1\n"
}


fail() {
	printf "[\033[0;31mFAIL\033[0m] $1\n"
	exit
}


required() {
	[[ -z $1 ]] && error "$2 not found; install it first" || ok "$2 found"
}

optional() {
	[[ -z $1 ]] && warn "$2 not found; $3 not available" || ok "$2 found"
}


exists_bin() {
	if [ $SHELL = "/bin/csh" ] ; then
		if which $1 1>/dev/null 2>/dev/null ; then
			return 0
		else
			return 1
		fi
	else
		if which $1 >&/dev/null ; then
			return 0
		else
			return 1
		fi
	fi
}


copyright() {
	echo "Argent Library Copyright (C) 2021 Abhishek Chakravarti"
	echo "This program comes with ABSOLUTELY NO WARRANTY; for details see LICENSE."
	echo "This is free software, and you are welcome to redistribute it"
	echo "under certain conditions; see LICENSE for details."
	echo ""
}


check_os() {
	OS=`uname`
	if [ $OS = "Linux" ] ; then
		ok "GNU/Linux detected..."
	elif [ $OS = "FreeBSD" ] ; then
		ok "FreeBSD detected..."
	else
		error "Unsupported OS; use FreeBSD or a Linux distro."
	fi
}


check_dep() {
	exists_bin make
	[[ $? -ne 0 ]] && MAKE= || MAKE=make
	required $MAKE "make"

	exists_bin gcc
	[[ $? -ne 0 ]] && GCC= || GCC=gcc
	[[ -z $GCC ]] && echo "" || ok "gcc found"
	
	exists_bin clang
	[[ $? -ne 0 ]] && CLANG= || CLANG=clang
	[[ -z $CLANG ]] && echo "" || ok "clang found"
	
	exists_bin ccache
	[[ $? -ne 0 ]] && CCACHE= || CCACHE=ccache
	optional $CCACHE "ccache" "compilation caching"
	
	exists_bin valgrind
	[[ $? -ne 0 ]] && VALGRIND= || VALGRIND=valgrind
	optional $VALGRIND "valgrind" "memory check"
	
	exists_bin gcovr
	[[ $? -ne 0 ]] && GCOVR= || GCOVR=gcovr
	optional $GCOVR "gcovr" "test coverage"
	
	exists_bin psql
	[[ $? -ne 0 ]] && PSQL= || PSQL=psql
	required $PSQL "PostgreSQL server"
	
	exists_bin pg_config
	[[ $? -ne 0 ]] && PGCONFIG= || PGCONFIG=pg_config
	required $PGCONFIG "libpq"
}


check_compiler() {
	[ $OS = "Linux" ] && CC=gcc || CC=clang
	depreq $CC $CC
}


copyright
echo "Starting Argent build configuration..."
check_os
check_dep

